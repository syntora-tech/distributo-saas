// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  walletAddress String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  distributions Distribution[]
  transactions  Transaction[]  @relation("UserTransactions")
  depositAddresses DepositAddress[]

  @@index([walletAddress])
}

model Distribution {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  tokenAddress String
  status      DistributionStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  userId      String       @db.Uuid
  user        User         @relation(fields: [userId], references: [id])
  depositAddressId String? @db.Uuid
  depositAddress   DepositAddress? @relation(fields: [depositAddressId], references: [id])
  transactions Transaction[]  @relation("DistributionTransactions")
  fees        Fee[]           @relation("DistributionFees")

  @@index([tokenAddress])
  @@index([userId])
  @@index([depositAddressId])
}

model Transaction {
  id            String      @id @default(uuid()) @db.Uuid
  hash          String
  status        String
  amount        Float
  walletAddress String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  distribution  Distribution @relation("DistributionTransactions", fields: [distributionId], references: [id])
  distributionId String      @db.Uuid
  fee           Fee?        @relation("TransactionFee")
  user          User?        @relation("UserTransactions", fields: [userId], references: [id])
  userId        String?      @db.Uuid
}

model Fee {
  id            String      @id @default(uuid()) @db.Uuid
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  transaction   Transaction? @relation("TransactionFee", fields: [transactionId], references: [id])
  transactionId String?      @unique @db.Uuid
  distribution  Distribution? @relation("DistributionFees", fields: [distributionId], references: [id])
  distributionId String?      @db.Uuid
}

model DepositAddress {
  id            String       @id @default(uuid()) @db.Uuid
  address       String       @unique
  derivationPath String
  status        DepositAddressStatus @default(ACTIVE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  userId        String       @db.Uuid
  user          User         @relation(fields: [userId], references: [id])
  distributions Distribution[]

  @@index([address])
  @@index([userId])
}

enum DistributionStatus {
  PENDING
  ACTIVE
  COMPLETED
  FAILED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DepositAddressStatus {
  ACTIVE
  INACTIVE
}
